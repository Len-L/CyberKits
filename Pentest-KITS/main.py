import subprocess as qq
from mailtm import Email
import requests
import os
import sys
import random
import string
import xml.etree.ElementTree as ET
import time
from defusedxml.ElementTree import parse as safe_parse

BOLD = "\033[1m"
GREEN_TEXT = "\033[32m"
RED_BG = "\033[41m"
RESET = "\033[0m"


banner = f"""
    \033[32m


        ╭━━━╮╱╱╱╱╱╭╮╱╱╱╱╱╱╭╮╱╭╮╭━┳━━┳━━━━┳━━━╮
        ┃╭━╮┃╱╱╱╱╭╯╰╮╱╱╱╱╭╯╰╮┃┃┃╭┻┫┣┫╭╮╭╮┃╭━╮┃
        ┃╰━╯┣━━┳━╋╮╭╋━━┳━┻╮╭╯┃╰╯╯╱┃┃╰╯┃┃╰┫╰━━╮
        ┃╭━━┫┃━┫╭╮┫┃┃┃━┫━━┫┃╱┃╭╮┃╱┃┃╱╱┃┃╱╰━━╮┃
        ┃┃╱╱┃┃━┫┃┃┃╰┫┃━╋━━┃╰╮┃┃┃╰┳┫┣╮╱┃┃╱┃╰━╯┃
        ╰╯╱╱╰━━┻╯╰┻━┻━━┻━━┻━╯╰╯╰━┻━━╯╱╰╯╱╰━━━╯
"""

while True:
    print(banner)
    print("\033[32m")
    print("1. Scanning")
    print("2. Exploit SSRF")
    print("3. Bypass 403")
    print("4. Parameter Finder [Mining URLS]")
    print("5. Temporary Email [anonim-kit]")
    print("6. MetaData Cleaner [anonim-kit] ")
    print("7. Subdomain Scanner")
    print("8. Online Exploit Finder")
    print("9. Files Sharing")
    print("99. Exit")

    opsi = input("\33[94m[Pentest-KITS]_Options-> ")
    print("\033[32m")

    if opsi=="1":
        IP = input("\33[94mInput IP-> ")
        print("\033[32m")
        qq.run(['nmap', '-sC', '-sV', IP, '-oA', 'scan'])
        with open("scan.nmap", "r") as f:
            data = f.read()
            if "netbios-ssn" in data:
                print(" ")
                print(BOLD + GREEN_TEXT + RED_BG + "=======================================Service SMB Detected=======================================" + RESET)
                print("\033[32m")
                qq.run(['python3', 'enum-smb.py', IP])

        print(" ")
        def parse_nmap_xml(xml_file):
            """Parse Nmap XML output"""
            services = []
            try:
                with open(xml_file, 'r', encoding='utf-8') as f:
                    if not f.readline().startswith('<?xml'):
                        print("Error: File is not valid XML!")
                        return []

                tree = safe_parse(xml_file)
                root = tree.getroot()

                for host in root.findall('host'):
                    if host.find('status').get('state') != 'up':
                        continue

                    ip = host.find("address[@addrtype='ipv4']").get('addr')
                    hostname_elem = host.find("hostnames/hostname[@name]")
                    hostname = hostname_elem.get('name') if hostname_elem else ip

                    for port in host.findall('ports/port'):
                        service_info = port.find('service')
                        if service_info is None:
                            continue

                        service_data = {
                            'host': hostname,
                            'ip': ip,
                            'port': port.get('portid'),
                            'protocol': port.get('protocol'),
                            'name': service_info.get('name', 'unknown'),
                            'product': service_info.get('product', ''),
                            'version': service_info.get('version', ''),
                            'cpe': service_info.get('cpe', '')
                        }

                        if service_data['product'] or service_data['cpe']:
                            services.append(service_data)

                return services

            except Exception as e:
                print(f"Error parsing XML: {e}")
                return []

        def search_cve(search_term):
            """Mencari CVE dengan parameter tetap"""
            base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
            headers = {'User-Agent': 'CyberKITS/3.0'}
            
            try:
                response = requests.get(
                    base_url,
                    params={'keywordSearch': search_term, 'resultsPerPage': 3},
                    headers=headers
                )
                response.raise_for_status()
                return response.json()
            
            except Exception as e:
                print(f"API Error: {e}")
                return None
            finally:
                time.sleep(3)

        def get_exploit_references(cve_data):
            """Cari referensi exploit dari data CVE"""
            exploit_sources = {
                'exploit-db': 'https://www.exploit-db.com/exploits/',
                'github': 'https://github.com/',
                'metasploit': 'https://www.rapid7.com/db/modules/',
                'packetstorm': 'https://packetstormsecurity.com/files/'
            }
            
            exploits = []
            for ref in cve_data.get('references', []):
                url = ref.get('url', '')
                for source, pattern in exploit_sources.items():
                    if pattern in url:
                        exploits.append({
                            'source': source.upper(),
                            'url': url
                        })
            return exploits

        def main():
            input_file = "scan.xml"
            
            print(BOLD + GREEN_TEXT + RED_BG + "=======================================Starting Analysiss=======================================" + RESET)
            print("\033[32m")
            services = parse_nmap_xml(input_file)
            
            if not services:
                print("No services found in scan.xml")
                return

            print(" ")
            print(BOLD + GREEN_TEXT + RED_BG + "=======================================CVE and Exploit Detection=======================================" + RESET)
            print("\033[32m")
            for service in services:
                search_terms = [
                    service['product'],
                    service['version'],
                    service['cpe']
                ]
                query = " ".join(filter(None, search_terms))
                
                if not query:
                    continue
                    
                print(f"\nService: {service['host']}:{service['port']}")
                print(f"Detail: {service['product']} {service['version']}")
                
                result = search_cve(query)
                if result and result.get('totalResults', 0) > 0:
                    for vuln in result['vulnerabilities'][:3]:
                        cve = vuln['cve']
                        cve_id = cve['id']
                        desc = next((d['value'] for d in cve['descriptions'] if d['lang'] == 'en'), 'No description')
                        score = "N/A"
                        
                        if 'cvssMetricV31' in cve.get('metrics', {}):
                            score = cve['metrics']['cvssMetricV31'][0]['cvssData']['baseScore']
                        elif 'cvssMetricV30' in cve.get('metrics', {}):
                            score = cve['metrics']['cvssMetricV30'][0]['cvssData']['baseScore']
                        
                        print(f"\n  CVE: {cve_id}")
                        print(f"  Skor: {score}")
                        print(f"  Deskripsi: {desc[:150]}...")
                        
                        # Cari referensi exploit
                        exploits = get_exploit_references(cve)
                        if exploits:
                            print("  Referensi Exploit:")
                            for idx, exploit in enumerate(exploits[:2], 1):
                                print(f"   {idx}. [{exploit['source']}] {exploit['url']}")
                        else:
                            print("  No exploit references were found")
                else:
                    print("  No related CVEs found")

        if __name__ == "__main__":
            main()
        qq.run(['rm', 'scan.gnmap', 'scan.nmap', 'scan.xml'])

    elif opsi=="2":
        print(" ")
        print("Make Sure Your Burpsuite Requests Are in 'ssrf-requests.txt'")
        ssl = input("Target HTTPS OR HTTP? [y/n]-> ")
        if ssl=="y":
            parameter = input("\33[94mInput Parameter-> ")
            print("\033[32m")
            qq.run(['python3', 'ssrf.py', '-r', 'ssrf-requests.txt', '-m', 'readfiles', '-p', parameter, '--ssl', '--uagent', '[CyberKits/Pentest-Kits]', '--level', '5'])

        elif ssl=="n":
            parameter = input("\33[94mInput Parameter-> ")
            print("\033[32m")
            qq.run(['python3', 'ssrf.py', '-r', 'ssrf-requests.txt', '-m', 'readfiles', '-p', parameter, '--uagent', '[CyberKits/Pentest-Kits]', '--level', '5'])
        else:
            print(" ")
            print("There are only 2 choices yes or no :)")

    elif opsi=="3":
        url = input("\33[94murl-> ")
        path = input("path-> ")
        print("\033[32m")
        qq.run(['bash', 'bypass-403.sh', url, path])

    elif opsi=="4":
        domain = input("\33[94mInput Domain-> ")
        print("\033[32m")
        qq.run(['python3', 'parameter.py', '-d', domain])
    
    elif opsi=="5":
        def listener(message):
            print("\n" + "="*50)
            print(f"📨 New Email Received!")
            print("="*50)
            print(f"Subject: {message.get('subject', 'No Subject')}")
            print(f"From: {message['from']['address']}")
            print("\nMessage Content:")
            content = message.get('text') or message.get('html') or "[No content]"
            print(content.strip())
            print("\n" + "="*50 + "\n")

        while True:
            try:
                username = ''.join(random.choice(string.ascii_lowercase) for _ in range(8)) + str(random.randint(100, 999))
                password = ''.join(random.choice(string.ascii_letters + string.digits + "!@#$%^&*") for _ in range(12))
                
                email_client = Email()
                email_client.register(username=username, password=password)
                break
            except Exception as e:
                print(f"⚠️ Registration failed: {str(e)}")
                print("Retrying with different credentials...")
                continue

        print("\n" + "═"*50)
        print("🔥 Temporary Email Credentials")
        print("═"*50)
        print(f"Email:    {email_client.address}")
        print(f"Password: {password}")
        print("═"*50 + "\n")

        email_client.start(listener, interval=5)
        print("\n📡 Listening for incoming emails...")
        print("Press CTRL+C to quit\n")

        try:
            while True:
                for cursor in '|/-\\':
                    sys.stdout.write(f'\rWaiting for emails... {cursor}')
                    sys.stdout.flush()
                    time.sleep(0.1)
        except KeyboardInterrupt:
            print("\n\n🛑 Shutting down email client...")
            email_client.stop()
            print("✅ Successfully terminated all connections")
    
    elif opsi=="6":
        print("\33[94mexample: /home/user/Desktop/Documen-penting.pdf")
        file = input("Enter the location and file name-> ")
        print("\033[32m")
        qq.run(["mat2", file])
    
    elif opsi=="7":
        domain = input("\33[94mDomain-> ")  
        protocol = input("protocol (http or https)-> ")  

        if protocol not in ["http", "https"]:
            print("\033[32mProtocol error, enter 'http' or 'https'.")
            exit()

        script_dir = os.path.dirname(__file__)
        wordlist_file = os.path.join(script_dir, "wordlist.txt")
        with open(wordlist_file, 'r') as f:
            wordlist = [line.strip() for line in f.readlines()]
        print("\033[32m")
        for subdomain in wordlist:
            target = f"{subdomain}.{domain}"
            try:
                url = f"{protocol}://{target}"
                response = requests.head(url, timeout=3)
                if response.status_code == 200:
                    print(f"[+] {target} -> {response.status_code}")
            except requests.exceptions.RequestException:
                pass
        print("====================finished======================")
        input("Enter To Exit")
    
    elif opsi=="8":
        print("To Exit type 'exit' ")
        while True:
            print("\33[94m")
            kunci = input("[Pentest-KITS]_Exploit-Finder-> ")
            print("\033[32m")
            if kunci=="exit":
                exit()
            qq.run(["python3", "pencari_exploit.py", "-s", f"\"{kunci}\"", "--html"])
    
    elif opsi=="9":
        file_path = input("file-> ")
        try:
            with open(file_path, "rb") as file:
                response = requests.post(
                    "https://file.io",
                    files={"file": file}
                )
                if response.status_code == 200:
                    data = response.json()
                    if data.get("success"):
                        print("\033[32m")
                        print(f"[+] File uploaded successfully!")
                        print(f"Download link: {data['link']}")
                        time.sleep(2)
                    else:
                        print(f"[-] Upload failed: {data.get('message', 'Unknown error')}")
                else:
                    print(f"[-] Upload failed with status code: {response.status_code}")
        except FileNotFoundError:
            print(f"Error: File '{file_path}' not found.")
        except Exception as e:
            print(f"Error: {e}")

            
        
            











    elif opsi=="99":
        print(" ")
        break

    else:
        print("Please enter the options according to the numbers provided")
        time.sleep(2)





