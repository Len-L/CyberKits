#!/usr/bin/python
from core.ssrf import SSRF
import argparse
import logging
import urllib3


def display_banner():
    print(" _____ _________________                     ") 
    print("/  ___/  ___| ___ \  ___|                    ")
    print("\ `--.\ `--.| |_/ / |_                       ")
    print(" `--. \`--. \    /|  _|                      ")
    print("/\__/ /\__/ / |\ \| |                        ")
    print("\____/\____/\_| \_\_|                        ")
    print("                                             ")
    print("                                             ")

def parse_args():
    example_text = '''
    '''
    parser = argparse.ArgumentParser(epilog=example_text, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-r', action ='store', dest='reqfile', help="SSRF Request file")
    parser.add_argument('-p', action ='store', dest='param',   help="SSRF Parameter to target")
    parser.add_argument('-m', action ='store', dest='modules', help="SSRF Modules to enable")
    parser.add_argument('-l', action ='store', dest='handler', help="Start an handler for a reverse shell", nargs='?', const='1')
    parser.add_argument('-v', action ='store', dest='verbose', help="Enable verbosity", nargs='?', const=True)
    parser.add_argument('--lhost', action ='store', dest='lhost',     help="LHOST reverse shell")
    parser.add_argument('--lport', action ='store', dest='lport',     help="LPORT reverse shell")
    parser.add_argument('--rfiles', action ='store', dest='targetfiles', help="Files to read with readfiles module", nargs='?', const=True)
    parser.add_argument('--uagent',action ='store', dest='useragent', help="User Agent to use")
    parser.add_argument('--ssl',   action ='store', dest='ssl',       help="Use HTTPS without verification", nargs='?', const=True)
    parser.add_argument('--proxy',   action ='store', dest='proxy',   help="Use HTTP(s) proxy (ex: http://localhost:8080)")
    parser.add_argument('--level', action ='store', dest='level',     help="Level of test to perform (1-5, default: 1)", nargs='?', const=1, default=1, type=int)
    results = parser.parse_args()
    
    if results.reqfile == None:
        parser.print_help()
        exit()

    return results

if __name__ == "__main__":
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    logging.basicConfig(
        level=logging.INFO,
        format="[%(levelname)s]:%(message)s",
        handlers=[
            logging.FileHandler("ssrf.log", mode='w'),
            logging.StreamHandler()
        ]
    )

    logging.addLevelName( logging.WARNING, "\033[1;31m%s\033[1;0m" % logging.getLevelName(logging.WARNING))
    logging.addLevelName( logging.ERROR, "\033[1;41m%s\033[1;0m" % logging.getLevelName(logging.ERROR))
    display_banner()

    args = parse_args()
    ssrf = SSRF(args)
